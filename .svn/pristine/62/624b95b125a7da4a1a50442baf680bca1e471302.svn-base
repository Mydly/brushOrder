
export default {
    mem:mem,
    alog:alog,

}

export function mem() {
    var key   = arguments[0] ? arguments[0] : '';
    var value = arguments[1];
    //如果键为空,退出
    if (!key) {
        alog('[缓存],key不存在异常');
        return;
    }

    //如果传入的值为null,那么清除缓存
    if (value === null) {
        alog('[缓存],清除缓存,key=' + key);
        return localStorage.removeItem(key);
    }
    //如果传入了值,那么写入缓存
    if (key && value) {
        alog('[缓存],写入缓存,key=' + key + '|value=' + value);
        isString(value) || ( value = JSON.stringify(value) );
        return localStorage.setItem(key, value);
    }
    //如果没有传入值,那么获取缓存
    if (key && !value) {
        var res = localStorage.getItem(key);
        if( !isString(res) ) {
            res = JSON.parse(res) ;
        }
        alog('[缓存],获取缓存,key=' + key + '|value=' + JSON.stringify(res));
        return res;
    }
}

export const alog = (log, type) => {
    console.log(log);
}

/*
 ***************    类型判断    **************
 */
export function isArray (object){ return object && typeof object==='object' && Array === object.constructor }

export function isString (object){ return object && typeof object==='string' && String === object.constructor }

export function isFunction (obj){ return obj && typeof obj === 'function' && Function === obj.constructor}

export function array_all_are_string(obj){
    if(!isArray(obj)) return false;
    for ( item in obj){
        if(!isString(item))return false;
    }
    return true;
}

export function isMobile (obj){ return isString(obj) && /^\d{11}$/.test(obj) }
export function isPassword (obj){ return isString(obj) && /^\S{6,20}$/.test(obj) }
