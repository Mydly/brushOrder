import {
    MemoryRouter as Router,
    Route,
    Redirect,
} from 'react-router-dom';
import { connect } from 'react-redux';
import React, { PropTypes } from 'react';

import { Button, Alert, Modal } from 'antd'

import '../static/style/common.scss';

import Nav from '../component/view/Nav';
import BootNavBar from '../component/view/BootNavBar';
import Content from '../component/view/Content';
import Index from '../component/view/Index';
import Finan from '../component/view/Finan';
import MyFinan from '../component/MyFinan/MyFinan';
import CoinIn from '../component/MyFinan/CoinIn';
import CoinOut from '../component/MyFinan/CoinOut';
import FinanCharge from '../component/MyFinan/FinanCharge';
import FinanMoney from '../component/MyFinan/FinanMoney';

import Safe from '../component/view/Safe';
import Trade from '../component/view/Trade';
import Issue from '../component/view/Issue';
import Money from '../component/view/Money';
import Vote from '../component/view/Vote';
import Login from '../component/view/Login';
import UserInfo from '../component/Login/UserInfo';


import CONSTS, { PageKey, AlertType } from '../config/consts';
import { changeTab, tabChangeAction } from '../actions/topNav';
import { alog } from  '../function/common';

class RouteList extends React.Component{
    constructor(props) {
        super(props);

        this.handleLogin = this.handleLogin.bind(this);
        this.appendCount = 0;
        alog('出现次数 初始化 0');
    }

    //组件初始化
    componentDidMount(){
        alog('出现次数 '+(++this.appendCount));

    }

    //组件将更新
    componentWillUpdate(){
        alog('出现次数 '+(++this.appendCount));
    }

    handleLogin(e){
        e.preventDefault();
        console.log(e);
        const {change} = this.props;
        change(PageKey.login.key);
    }

    render(){

        // ###内容页面
        let contentCom = <Index key={PageKey.index.key}/>;
        switch (this.props.tabBar){
            case PageKey.trade.key:
                contentCom = <Trade key={PageKey.trade.key} />;
                break;
            case PageKey.safe.key:
                contentCom = <Safe key={PageKey.safe.key} />;
                break;
            case PageKey.finan.key:
                contentCom = <Finan key={PageKey.finan.key} />;
                break;
            case PageKey.finanInfo.key:
                contentCom = <MyFinan key={PageKey.finanInfo.key} />;
                break;
            case PageKey.finanCharge.key:
                contentCom = <FinanCharge />;
                break;
            case PageKey.finanMoney.key:
                contentCom = <FinanMoney />;
                break;
            case PageKey.finanIn.key:
                contentCom = <CoinIn />;
                break;
            case PageKey.finanOut.key:
                contentCom = <CoinOut />;
                break;
            case PageKey.issue.key:
                contentCom = <Issue key={PageKey.issue.key} />;
                break;
            case PageKey.money.key:
                contentCom = <Money key={PageKey.money.key} />;
                break;
            case PageKey.vote.key:
                contentCom = <Vote key={PageKey.vote.key} />;
                break;
            case PageKey.login.key:
                contentCom = <Login key={PageKey.login.key} />;
                break;
            default:
        }

        // ###提示
        let type = null;
        let Alt  = "";
        if(this.props.alert.alert){
            switch (this.props.alert.type){
                case Alert.successAlert:
                    type = "success";
                    break;
                case Alert.infoAlert:
                    type = "info";
                    break;
                case Alert.warningAlert:
                    type = "warning";
                    break;
                case Alert.errorAlert:
                    type = "error";
                    break;
                default:
                    type = "info";
            }
            Alt = <Alert className="alertDiv" message={this.props.alert.msg} type={type} showIcon banner={true}
            />;
        }

        return (
            <div>
                <BootNavBar />
                {Alt}
                {contentCom}
            </div>
        );
    }
}

RouteList.propTypes ={
    tabBar:PropTypes.string,
    lastBar:PropTypes.string,
    alert:PropTypes.string,
    userinfo:PropTypes.object,
    change:PropTypes.func,
}

function mapStateToProps(state) {

    console.log('state ========');
    console.log(state);

    return {
        tabBar: state.topNav.tabBar,
        lastBar:state.topNav.lastBar,
        alert:state.alert,
        userinfo:state.topNav.userinfo
    };
}

const mapDispatchToProps = (dispatch) => {
    return {
        change:(tab) => {
            dispatch(tabChangeAction(tab))
        }}
}

function Routes() {

    console.log('routes this======');
    console.log(this);

    return (
        <Router>
            <div>
                <Route path="/" component={connect(mapStateToProps, mapDispatchToProps)(RouteList)} />
            </div>
        </Router>
    );
}

export default Routes;
